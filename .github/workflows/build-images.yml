name: Build and Push Docker Images

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io

jobs:
  # 检测哪些镜像需要构建
  detect-changes:
    runs-on: ubuntu-22.04
    outputs:
      cpp-bazel-ci: ${{ steps.changes.outputs.cpp-bazel-ci }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          cpp-bazel-ci:
            - 'cpp-bazel-ci/**'
            - '.github/workflows/build-images.yml'

  # 构建C++ Bazel CI镜像
  build-cpp-bazel-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.cpp-bazel-ci == 'true' || github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for cpp-bazel-ci
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/cpp-bazel-ci
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push cpp-bazel-ci image
      uses: docker/build-push-action@v5
      with:
        context: ./cpp-bazel-ci
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 汇总所有构建结果
  build-summary:
    needs: [detect-changes, build-cpp-bazel-ci]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Build Summary
      run: |
        echo "## 🐳 镜像构建摘要" >> $GITHUB_STEP_SUMMARY
        echo "| 镜像 | 状态 | 变更检测 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|----------|" >> $GITHUB_STEP_SUMMARY
        
        # cpp-bazel-ci状态
        if [ "${{ needs.build-cpp-bazel-ci.result }}" = "success" ]; then
          echo "| cpp-bazel-ci | ✅ 成功 | ${{ needs.detect-changes.outputs.cpp-bazel-ci }} |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.build-cpp-bazel-ci.result }}" = "skipped" ]; then
          echo "| cpp-bazel-ci | ⏭️ 跳过 | ${{ needs.detect-changes.outputs.cpp-bazel-ci }} |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| cpp-bazel-ci | ❌ 失败 | ${{ needs.detect-changes.outputs.cpp-bazel-ci }} |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 说明" >> $GITHUB_STEP_SUMMARY
        echo "- 只有文件变更的镜像才会被构建" >> $GITHUB_STEP_SUMMARY
        echo "- PR构建不会推送到仓库，只进行构建和测试" >> $GITHUB_STEP_SUMMARY
        echo "- 推送到主分支会自动构建并推送所有镜像" >> $GITHUB_STEP_SUMMARY 
